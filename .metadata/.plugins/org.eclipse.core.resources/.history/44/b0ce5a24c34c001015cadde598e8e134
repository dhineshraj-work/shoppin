package com.shoppin.ecommerce.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.shoppin.ecommerce.model.CartModel;
import com.shoppin.ecommerce.model.CartProductModel;
import com.shoppin.ecommerce.model.CustomerModel;
import com.shoppin.ecommerce.model.ProductModel;
import com.shoppin.ecommerce.repo.AddressRepository;
import com.shoppin.ecommerce.repo.CartProductRepository;
import com.shoppin.ecommerce.repo.CartRepository;
import com.shoppin.ecommerce.repo.CustomerRepository;

@Service
public class CartService {

    private final CustomerModel customerModel;

	@Autowired
	CustomerRepository customerRepository;
	
	@Autowired
	CartRepository cartRepository;
	
	@Autowired
	CartProductRepository cartProductRepository;
	
	@Autowired
	AddressRepository addressRepository;

    CartService(CustomerModel customerModel) {
        this.customerModel = customerModel;
    }

	public ResponseEntity<Object> getCart(String username) throws NullPointerException{
		
		
		return ResponseEntity.ok(cartRepository.findByCustomerEmail(username).orElseThrow());
	
	}

	public ResponseEntity<Object> addProductToCart(String username, ProductModel product) {
		try {
			CustomerModel customer = customerRepository.findByEmail(username).orElse(null);
			
			CartModel cart = cartRepository.findByCustomerEmail(username).orElse(null);
			
			if(cart==null) {
				cart = new CartModel();
				
				cart.setCustomer(customer);
				cart = cartRepository.save(cart);
			}
			
			if(cartProductRepository.existsByCartCustomerPkAndProductPk(customer.getPk(), product.getPk())) {
				return ResponseEntity.status(409).body("The product already added in cart");
			}
			
			List<CartProductModel> cartProducts = cart.getCartProducts();
			
			if(cartProducts==null) {
				cartProducts = new ArrayList<>();
				cart.setCartProducts(cartProducts);
			}
			
			CartProductModel cartProductModel = new CartProductModel();
			cartProductModel.setCart(cart);
			cartProductModel.setProduct(product);
			cartProductModel.setQuantity(1);
			
			cartProducts.add(cartProductModel);
			cartProductRepository.save(cartProductModel);
			
			cart.updateTotalPrice(cart.getCartProducts());
			
			return ResponseEntity.ok(cart);
			
			
		}catch(Exception e) {
			return ResponseEntity.status(500).body("Something went wrong\n"+e);
		}
	}

	public ResponseEntity<Object> updateCart(String username, CartProductModel cp) {
		try {
			
			CustomerModel customer = customerRepository.findByEmail(username).orElse(null);
			
			CartModel cart = cartRepository.findByCustomerEmail(username).orElse(null);
			
			CartProductModel cartProduct = cartProductRepository.findByCartCustomerPkAndProductPk(customer.getPk(), cp.getProduct().getPk()).orElse(null);
			
			if(!cartProductRepository.existsByCartCustomerPkAndProductPk(customer.getPk(), cp.getProduct().getPk())) {
				return ResponseEntity.status(404).body("The Product is not available in your cart");
			}
			
			if(cp.getQuantity()==0) {
				cartProductRepository.deleteByCartCustomerPkAndProductPk(customer.getPk(), cp.getProduct().getPk());
				cart.updateTotalPrice(cart.getCartProducts());
				return ResponseEntity.ok("Cart Updated");
			}
			
			cartProduct.setQuantity(cp.getQuantity());
			
			cart.updateTotalPrice(cart.getCartProducts());
			
			cartProductRepository.save(cartProduct);
			
			return ResponseEntity.ok(cartRepository.findByCustomerEmail(username));
			
		}catch(Exception e) {
			return ResponseEntity.status(500).body("Something went wrong while updating cart");
		}
	}

	public ResponseEntity<Object> deleteCart(String username, ProductModel product) {
		try {
			CustomerModel customer = customerRepository.findByEmail(username).orElse(null);
			
			CartModel cart = cartRepository.findByCustomerEmail(username).orElse(null);
			
			CartProductModel cartProduct = cartProductRepository.findByCartCustomerPkAndProductPk(customer.getPk(), product.getPk()).orElse(null);
			
			if(!cartProductRepository.existsByCartCustomerPkAndProductPk(customer.getPk(), product.getPk())) {
				return ResponseEntity.status(404).body("The Product is not available in your cart");
			}
			cartProductRepository.deleteByCartCustomerPkAndProductPk(customer.getPk(), product.getPk());
			cart.updateTotalPrice(cart.getCartProducts());
			return ResponseEntity.ok("Cart Deleted");
		}catch(Exception e) {
			return ResponseEntity.status(500).body("Something went wrong while Deleting cart");
		}
	}
	
	
}
