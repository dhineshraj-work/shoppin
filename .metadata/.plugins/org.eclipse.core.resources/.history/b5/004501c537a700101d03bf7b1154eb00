package com.shoppin.ecommerce.model;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@EntityListeners(AuditingEntityListener.class)
@Table(name = "cart")
public class CartModel {
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE)
	@JsonIgnore
	private Integer pk;
	
	@OneToOne
	@JoinColumn(name = "customer_id", referencedColumnName = "pk", unique = true)
	@JsonBackReference
	private CustomerModel customer;
	
	@OneToMany(mappedBy = "cart", cascade = CascadeType.ALL)
	@JsonManagedReference("cart_entry")
	private List<CartEntryModel> cartEntries;
	
	@OneToOne
	@JoinColumn(name = "payment_address_id", referencedColumnName = "pk")
	private PaymentAddressModel paymentAddress;
	
	@OneToOne
	@JoinColumn(name = "delivery_address_id", referencedColumnName = "pk")
	private DeliveryAddressModel deliveryAddress;
	
	@Enumerated(EnumType.STRING)
	private PaymentMethods paymentMethod = PaymentMethods.NONE;
	
	private double cartDiscountPrice;
	
	private double totalPrice;
	
	private boolean isPaymentCompleted = false;
	
	@CreatedDate
	@JsonIgnore
	private LocalDateTime createdTime;
	
	@LastModifiedDate
	@JsonIgnore
	private LocalDateTime lastUpdatedTime;
	
	@CreatedBy
	@JsonIgnore
	private String createdBy;
	
	@LastModifiedBy
	@JsonIgnore
	private String lastModifiedBy;

	public double updateTotalPrice(List<CartEntryModel> cartProducts) {
		
		double total = 0;
		
		if(cartProducts==null || cartProducts.isEmpty()) {
			return total;
		}
		for(CartEntryModel cp: cartProducts) {
			total = total+((cp.getProduct().getPrice())*cp.getQuantity());
		}
		
		return total;
	}
	
	public double updateCartDiscountPrice(List<CartEntryModel> cartProducts) {
		
		double total = 0;
		
		if(cartProducts==null || cartProducts.isEmpty()) {
			return total;
		}
		for(CartEntryModel cp: cartProducts) {
			total = total+((cp.getProduct().getPrice()-cp.getProduct().getDiscount())*cp.getQuantity());
		}
		return total;
	}
}
