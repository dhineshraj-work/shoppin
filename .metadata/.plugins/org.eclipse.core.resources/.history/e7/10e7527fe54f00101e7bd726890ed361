package com.shoppin.ecommerce.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.shoppin.ecommerce.model.CartModel;
import com.shoppin.ecommerce.model.CartProductModel;
import com.shoppin.ecommerce.model.CustomerModel;
import com.shoppin.ecommerce.model.OrderEntryModel;
import com.shoppin.ecommerce.model.OrderModel;
import com.shoppin.ecommerce.model.OrderStatus;
import com.shoppin.ecommerce.repo.CartRepository;
import com.shoppin.ecommerce.repo.CustomerRepository;
import com.shoppin.ecommerce.repo.OrderEntryRepository;
import com.shoppin.ecommerce.repo.OrderRepository;

@Service
public class OrderService {
	
	@Autowired
	OrderRepository orderRepository;
	
	@Autowired
	CustomerRepository customerRepository;
	
	@Autowired
	CartRepository cartRepository;
	
	@Autowired
	OrderEntryRepository orderEntryRepository;
	
	@Autowired
	OrderProcessService orderProcessService;
	
	public ResponseEntity<?> getUserOrders(String username) {
		List<OrderModel> ordersList = orderRepository.findByUserEmail(username);
		if(ordersList.isEmpty() || ordersList==null) {
			return ResponseEntity.status(404).body("No Order for this user");
		}
		return ResponseEntity.ok(ordersList);
	}
	
	public ResponseEntity<Object> getUserOrderByOrderNumber(String username, String orderNo) {
		OrderModel order = orderRepository.findByUserEmailAndOrderNumber(username, orderNo).orElse(null);
		if(order==null) {
			return ResponseEntity.status(404).body("No Order Found");
		}
		return ResponseEntity.ok(order);
	}
	
	public ResponseEntity<Object> cancelOrder(String username, String orderNo) {
		try {
			
			OrderModel order = orderRepository.findByUserEmailAndOrderNumber(username, orderNo).orElse(null);
			if(order==null) {
				return ResponseEntity.status(404).body("No Order Found");
			}
			
			order.setStatus(OrderStatus.CANCELLED);
			
			orderRepository.save(order);
			
			orderProcessService.initiateCancelOrderProcess(orderNo);
			
			return ResponseEntity.ok("Order Canceled : "+orderNo);
			
		}catch(Exception e) {
			return ResponseEntity.status(500).body("Something went wrong while placing order\n"+ e);
		}
	}

	public ResponseEntity<Object> placeOrder(String username, CartModel cart){
		
		try {
			
			if(!cart.isPaymentCompleted()) {
				return ResponseEntity.status(402).body("Something went wrong while placing order due to payment");
			}
			
			CustomerModel customer = customerRepository.findByEmail(username).orElse(null);
			OrderModel order = new OrderModel();
			
			order.setUser(customer);
			order.setDeliveryAddress(cart.getDeliveryAddress());
			order.setPaymentAddress(cart.getPaymentAddress());
			order.setOrderEntries(new ArrayList<OrderEntryModel>());
			order.setOrderNumber(generateOrderCode());
			order.setStatus(OrderStatus.WAITING);
			order.setPaymentCompleted(true);
			order.setTotalPrice(cart.getTotalPrice());
			order.setOrderDiscountPrice(cart.getCartDiscountPrice());
			order.setTotalDiscount(order.getTotalPrice()-order.getTotalPrice());
			order.setPaymentMethod(cart.getPaymentMethod());
			
			orderRepository.save(order);
			
			order.setOrderEntries(setOrderEntryModel(cart, order));
			
			orderRepository.save(order);
			
			orderProcessService.initiatePlacelOrderProcess(order.getOrderNumber());
			
			cartRepository.deleteByCustomerEmail(username);
			
			return ResponseEntity.status(201).body("Order Created:"+order.getOrderNumber());
			
		}catch(Exception e) {
			return ResponseEntity.status(500).body("Something went wrong while placing order\n"+ e);
		}
	}

	private String generateOrderCode() {
		
		String order = orderRepository.findTopOrderNumberByOrderByCreatedTimeDesc().orElse(null);
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
		LocalDate todayDateTime = LocalDate.now();
		
		String today = todayDateTime.format(formatter);
		
		if(order==null) {
			return today+"-0001";
		}
		
		Integer lastOrder = Integer.parseInt(order.substring(8));
		
		String current = today+"-"+String.valueOf(lastOrder+1);
		
		return current;
		
	}
	
	private List<OrderEntryModel> setOrderEntryModel(CartModel cart, OrderModel order) {
		
		List<CartProductModel> cartProduct = cart.getCartProducts();
		
		List<OrderEntryModel> orderEntry = new ArrayList<OrderEntryModel>();
		
		for(CartProductModel cartData : cartProduct) {
			
			OrderEntryModel orderEntryTemp = new OrderEntryModel();
			
			orderEntryTemp.setOrder(order);
			orderEntryTemp.setProduct(cartData.getProduct());
			orderEntryTemp.setQuantity(cartData.getQuantity());
			orderEntryTemp.setDiscount(cartData.getProduct().getDiscount());
			
			orderEntry.add(orderEntryTemp);
		}
		
		orderEntryRepository.saveAll(orderEntry);
		
		return orderEntry;
	}
}
